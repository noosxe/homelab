---
- name: Install NFS server package
  become: true
  become_method: su
  ansible.builtin.apt:
    name: nfs-kernel-server
    state: present

- name: Enable and start NFS server
  become: true
  become_method: su
  ansible.builtin.service:
    name: nfs-kernel-server.service
    state: started
    enabled: true

- name: Configure time-machine zfs filesystem
  become: true
  become_method: su
  community.general.zfs:
    name: store/time-machine
    state: present
    extra_zfs_properties:
      compression: true
      sharenfs: "rw=@192.168.10.101"

- name: Download ubuntu cloudimg
  ansible.builtin.get_url:
    url: "{{ cloudimg_url }}"
    dest: "{{ cloudimg_file }}"

- name: Install proxmoxer
  ansible.builtin.pip:
    name: proxmoxer

- name: Create cloud vm template
  proxmox_kvm:
    api_host: "{{ pv_host }}"
    api_user: "{{ pv_user }}"
    api_token_id: "{{ pv_token_id }}"
    api_token_secret: "{{ pv_token_secret }}"
    name: "{{ cvm.name }}"
    node: "{{ pv_host }}"
    cores: "{{ cvm.cores }}"
    memory: "{{ cvm.memory }}"
    vmid: "{{ cvm.id }}"
    localtime: no
    agent: yes
    onboot: yes
    net:
      net0: "virtio,bridge=vmbr0"
  register: template_vm_result

- name: Import ubuntu cloud image
  become: true
  become_method: su
  ansible.builtin.command: /usr/sbin/qm importdisk {{ cvm.id }} {{ cloudimg_file }} local-lvm
  when: template_vm_result.changed

- name: Setup ubuntu cloud template
  become: true
  become_method: su
  ansible.builtin.command:
    argv:
      - /usr/sbin/qm
      - set
      - "{{ cvm.id }}"
      - --scsihw=virtio-scsi-pci
      - --scsi0=local-lvm:vm-{{ cvm.id }}-disk-0
      - --ide2=local-lvm:cloudinit
      - --boot=c
      - --bootdisk=scsi0
      - --serial0=socket
      - --vga=serial0
  when: template_vm_result.changed

- name: Convert to template
  become: true
  become_method: su
  ansible.builtin.command:
    argv:
      - /usr/sbin/qm
      - template
      - "{{ cvm.id }}"
  when: template_vm_result.changed

- name: Clone the template
  community.general.proxmox_kvm:
    api_host: "{{ pv_host }}"
    api_user: "{{ pv_user }}"
    api_token_id: "{{ pv_token_id }}"
    api_token_secret: "{{ pv_token_secret }}"
    node: "{{ pv_host }}"
    clone: "{{ cvm.name }}"
    vmid: "{{ cvm.id }}"
    newid: "{{ item.id }}"
    name: "{{ item.name }}"
    timeout: 300
  loop: "{{ vms }}"

- name: Configure cloned VMs
  community.general.proxmox_kvm:
    api_host: "{{ pv_host }}"
    api_user: "{{ pv_user }}"
    api_token_id: "{{ pv_token_id }}"
    api_token_secret: "{{ pv_token_secret }}"
    node: "{{ pv_host }}"
    vmid: "{{ item.id }}"
    ipconfig:
      ipconfig0: "ip={{ item.inventory_hostname }}/24,gw={{ item.gw }}"
    sshkeys: "{{ lookup('file', item.sshkeyfile) }}"

    update: yes
  loop: "{{ vms }}"

- name: Configure disk size for vms
  become: true
  become_method: su
  command: /usr/sbin/qm resize {{ item.id }} scsi0 {{ item.disk }}
  loop: "{{ vms }}"
  when: item.disk is defined

- name: Configure usb devices for vms
  become: true
  become_method: su
  ansible.builtin.command:
    cmd: /usr/sbin/qm set "{{ item[0].id }}" -"{{ item[1].name }}" host="{{ item[1].host }},usb3=yes"
  loop: "{{ vms | subelements('usb_devices') }}"
  when: item[0].usb_devices is defined and (item[0].usb_devices|length > 0)
  ignore_errors: true

- name: Start VMs
  community.general.proxmox_kvm:
    api_host: "{{ pv_host }}"
    api_user: "{{ pv_user }}"
    api_token_id: "{{ pv_token_id }}"
    api_token_secret: "{{ pv_token_secret }}"
    node: "{{ pv_host }}"
    vmid: "{{ item.id }}"
    state: started
    update: yes
  register: wait
  loop: "{{ vms }}"

- name: Waiting for the VM to start
  wait_for:
    timeout: 45
  when: wait.changed == true
